@INPROCEEDINGS{bruntink04, 
author={M. Bruntink and A. van Deursen}, 
booktitle={Source Code Analysis and Manipulation, Fourth IEEE International Workshop on}, 
title={Predicting class testability using object-oriented metrics}, 
year={2004}, 
pages={136-145}, 
keywords={Java;object-oriented methods;program testing;Java;class testability;object-oriented metrics;ISO standards;Java;Object oriented modeling;Programming;Software quality;Software systems;Software testing;Software tools;System testing;Writing}, 
doi={10.1109/SCAM.2004.16}, 
month={Sept}}

@INPROCEEDINGS{watson96,
    author = {Arthur H. Watson and Thomas J. Mccabe and Dolores R. Wallace},
    title = {Special Publication 500-235, Structured Testing: A Software Testing Methodology Using the Cyclomatic Complexity Metric},
    booktitle = {U.S. Department of Commerce/National Institute of Standards and Technology},
    year = {1996}
}

@BOOK{kan95,
  title = {Metrics and Models in Software Quality Engineering},
  publisher = {Addison Wesley},
  year = {1995},
  author = {Stephen H. Kan},
  address = {Reading, MA}
}

@INPROCEEDINGS{srivastava2013, 
author={S. Srivastava and R. Kumar}, 
booktitle={2013 International Conference on Intelligent Systems and Signal Processing (ISSP)}, 
title={Indirect method to measure software quality using CK-OO suite}, 
year={2013}, 
pages={47-51}, 
keywords={C++ language;object-oriented methods;program testing;software maintenance;software metrics;software quality;software reliability;software reusability;C++;CK metrics;CK-OO suite;maintainability;object oriented design metrics;object oriented language;object oriented technologies;object-oriented software metrics;reliability;reusability;software development process;software quality;testability;Object oriented modeling;Software measurement;Software quality;Software reliability;S/W Quality;S/W measurement;matrices}, 
doi={10.1109/ISSP.2013.6526872}, 
month={March}
}

@inproceedings{malaiya1995,
  title={Antirandom testing: Getting the most out of black-box testing},
  author={Malaiya, Yashwant K},
  booktitle={Software Reliability Engineering, 1995. Proceedings., Sixth International Symposium on},
  pages={86--95},
  year={1995},
  organization={IEEE}
}

@article{King1976,
 author = {King, James C.},
 title = {Symbolic Execution and Program Testing},
 journal = {Commun. ACM},
 issue_date = {July 1976},
 volume = {19},
 number = {7},
 month = jul,
 year = {1976},
 issn = {0001-0782},
 pages = {385--394},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/360248.360252},
 doi = {10.1145/360248.360252},
 acmid = {360252},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {program debugging, program proving, program testing, program verification, symbolic execution, symbolic interpretation}
} 

@article{Anand2013,
 author = {Anand, Saswat and Burke, Edmund K. and Chen, Tsong Yueh and Clark, John and Cohen, Myra B. and Grieskamp, Wolfgang and Harman, Mark and Harrold, Mary Jean and Mcminn, Phil},
 title = {An Orchestrated Survey of Methodologies for Automated Software Test Case Generation},
 journal = {J. Syst. Softw.},
 issue_date = {August, 2013},
 volume = {86},
 number = {8},
 month = aug,
 year = {2013},
 issn = {0164-1212},
 pages = {1978--2001},
 numpages = {24},
 url = {http://dx.doi.org/10.1016/j.jss.2013.02.061},
 doi = {10.1016/j.jss.2013.02.061},
 acmid = {2503991},
 publisher = {Elsevier Science Inc.},
 address = {New York, NY, USA},
 keywords = {Adaptive random testing, Combinatorial testing, Model-based testing, Orchestrated survey, Search-based software testing, Software testing, Symbolic execution, Test automation, Test case generation}
} 

@article{Korel1990,
 author = {Korel, B.},
 title = {Automated Software Test Data Generation},
 journal = {IEEE Trans. Softw. Eng.},
 issue_date = {August 1990},
 volume = {16},
 number = {8},
 month = aug,
 year = {1990},
 issn = {0098-5589},
 pages = {870--879},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/32.57624},
 doi = {10.1109/32.57624},
 acmid = {101755},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {array indexes, automated software test data generation, automatic programming, backtracking, data structures, dynamic data structures, dynamic data-flow analysis, function-minimization methods, function-minimization search algorithms, input variables, minimisation, pointers, program behavior, program execution flow, program testing, search problems.}
} 

@article{Davis1995,
 author = {Davis, Margaret J.},
 title = {Process and Product: Dichotomy or Duality?},
 journal = {SIGSOFT Softw. Eng. Notes},
 issue_date = {April 1995},
 volume = {20},
 number = {2},
 month = apr,
 year = {1995},
 issn = {0163-5948},
 pages = {17--18},
 numpages = {2},
 url = {http://doi.acm.org/10.1145/224155.565634},
 doi = {10.1145/224155.565634},
 acmid = {565634},
 publisher = {ACM},
 address = {New York, NY, USA}
} 


@article{slaughter1998,
 author = {Slaughter, Sandra A. and Harter, Donald E. and Krishnan, Mayuram S.},
 title = {Evaluating the Cost of Software Quality},
 journal = {Commun. ACM},
 issue_date = {Aug. 1998},
 volume = {41},
 number = {8},
 month = aug,
 year = {1998},
 issn = {0001-0782},
 pages = {67--73},
 numpages = {7},
 url = {http://doi.acm.org/10.1145/280324.280335},
 doi = {10.1145/280324.280335},
 acmid = {280335},
 publisher = {ACM},
 address = {New York, NY, USA}
} 

@INPROCEEDINGS{bashir2008test, 
author={M. F. Bashir and S. H. K. Banuri}, 
booktitle={Emerging Technologies, 2008. ICET 2008. 4th International Conference on}, 
title={Automated model based software Test Data Generation System}, 
year={2008}, 
pages={275-279}, 
keywords={formal specification;program testing;program verification;software prototyping;software reliability;application under test validation;code reclassification;software development lifecycle construction;software reliability;software specification;software test data generation system;Application software;Automatic testing;Bones;Computer architecture;Distributed computing;Humans;Performance evaluation;Programming;Software testing;System testing;Application Under Test (AUT);Black Box Testing (BBT);Code based TDG;Specification based TDG;TDG System;Test Data Generation (TDG);White Box Testing (WBT)}, 
doi={10.1109/ICET.2008.4777514}, 
month={Oct}}

@article{binder1994test,
 author = {Binder, Robert V.},
 title = {Design for Testability in Object-oriented Systems},
 journal = {Commun. ACM},
 issue_date = {Sept. 1994},
 volume = {37},
 number = {9},
 month = sep,
 year = {1994},
 issn = {0001-0782},
 pages = {87--101},
 numpages = {15},
 url = {http://doi.acm.org/10.1145/182987.184077},
 doi = {10.1145/182987.184077},
 acmid = {184077},
 publisher = {ACM},
 address = {New York, NY, USA}
} 

@article{Cotroneo_2013,
 author = {Cotroneo, Domenico and Pietrantuono, Roberto and Russo, Stefano},
 title = {Testing Techniques Selection Based on ODC Fault Types and Software Metrics},
 journal = {J. Syst. Softw.},
 issue_date = {June, 2013},
 volume = {86},
 number = {6},
 month = jun,
 year = {2013},
 issn = {0164-1212},
 pages = {1613--1637},
 numpages = {25},
 url = {http://dx.doi.org/10.1016/j.jss.2013.02.020},
 doi = {10.1016/j.jss.2013.02.020},
 acmid = {2467405},
 publisher = {Elsevier Science Inc.},
 address = {New York, NY, USA},
 keywords = {Software testing}
} 

@article{Escalona2011,
 author = {Escalona, M. J. and Gutierrez, J. J. and Mej\'{\i}as, M. and Arag\'{o}n, G. and Ramos, I. and Torres, J. and Dom\'{\i}nguez, F. J.},
 title = {An Overview on Test Generation from Functional Requirements},
 journal = {J. Syst. Softw.},
 issue_date = {August, 2011},
 volume = {84},
 number = {8},
 month = aug,
 year = {2011},
 issn = {0164-1212},
 pages = {1379--1393},
 numpages = {15},
 url = {http://dx.doi.org/10.1016/j.jss.2011.03.051},
 doi = {10.1016/j.jss.2011.03.051},
 acmid = {1995021},
 publisher = {Elsevier Science Inc.},
 address = {New York, NY, USA},
 keywords = {Early testing, Functional test generation, Testing}
} 



@book{graham2008foundations,
  title={Foundations of Software Testing: ISTQB Certification},
  author={Graham, D. and Van Veenendaal, E. and Evans, I.},
  isbn={9781844809899},
  url={https://books.google.ie/books?id=Ss62LSqCa1MC},
  year={2008},
  publisher={Cengage Learning}
}

@ARTICLE{gerhart1975, 
author={J. B. Goodenough and S. L. Gerhart}, 
journal={IEEE Transactions on Software Engineering}, 
title={Toward a theory of test data selection}, 
year={1975}, 
volume={SE-1}, 
number={2}, 
pages={156-173}, 
keywords={program debugging;program diagnostics;software development;test data selection;test reliability;validity;Fasteners;Reliability engineering;Reliability theory;Software;Software reliability;Testing;Proofs of correctness;testing}, 
doi={10.1109/TSE.1975.6312836}, 
ISSN={0098-5589}, 
month={June},}

@inproceedings{Hamlet_1989,
 author = {Hamlet, R.},
 title = {Theoretical Comparison of Testing Methods},
 booktitle = {Proceedings of the ACM SIGSOFT '89 Third Symposium on Software Testing, Analysis, and Verification},
 series = {TAV3},
 year = {1989},
 isbn = {0-89791-342-6},
 location = {Key West, Florida, USA},
 pages = {28--37},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/75308.75313},
 doi = {10.1145/75308.75313},
 acmid = {75313},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{hilburn2002software,
  title={Software quality across the curriculum},
  author={Hilburn, Y and Towhidnejad, Massood},
  booktitle={Frontiers in Education, 2002. FIE 2002. 32nd Annual},
  volume={3},
  pages={S1G--18},
  year={2002},
  organization={IEEE}
}

@article{keyvanpour2012automatic,
  title={Automatic Software Test Case Generation: An Analytical Classification Framework},
  author={Keyvanpour, Mohammad Reza and Homayouni, Hajar and Shirazee, Hossein},
  journal={International Journal of Software Engineering and Its Applications},
  volume={6},
  number={4},
  pages={1--16},
  year={2012}
}

@article{wagner2005,
 author = {Wagner, Stefan and Seifert, Tilman},
 title = {Software Quality Economics for Defect-detection Techniques Using Failure Prediction},
 journal = {SIGSOFT Softw. Eng. Notes},
 issue_date = {July 2005},
 volume = {30},
 number = {4},
 month = may,
 year = {2005},
 issn = {0163-5948},
 pages = {1--6},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/1082983.1083296},
 doi = {10.1145/1082983.1083296},
 acmid = {1083296},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {reliability model, software quality costs},
} 

@inproceedings{linda2006quality,
  author    = {Linda M. Northrop},
  title     = {Let's Teach Architecting High Quality Software},
  booktitle = {19th Conference on Software Engineering Education and Training (CSEE{\&}T
               2006), 19-21 April 2006, Turtle Bay, Hawaii, {USA}},
  pages     = {5},
  year      = {2006},
  url       = {http://dx.doi.org/10.1109/CSEET.2006.23},
  doi       = {10.1109/CSEET.2006.23}
}

@book{pezze2008software,
  title={Software testing and analysis: process, principles, and techniques},
  author={Pezz{\`e}, M. and Young, M.},
  isbn={9780471455936},
  lccn={2008299671},
  url={https://books.google.com.br/books?id=mjEiAQAAIAAJ},
  year={2008},
  publisher={Wiley}
}

@book{pfleeger2010,
  title={Software Engineering: Theory and Practice},
  author={Pfleeger, S.L. and Atlee, J.M.},
  isbn={9780136061694},
  lccn={2008051400},
  url={https://books.google.com.br/books?id=7zbSZ54JG1wC},
  year={2010},
  publisher={Prentice Hall}
}


@MISC{Shahid_astudy,
    author = {Muhammad Shahid and Suhaimi Ibrahim and Mohd Naz’ri Mahrin},
    title = {A Study on Test Coverage in Software Testing},
    year = {}
}

@book{pressman2009engenharia,
  title={Engenharia de Software - 7.ed.: },
  author={Pressman, R.S.},
  isbn={9788580550443},
  url={https://books.google.com.br/books?id=y0rH9wuXe68C},
  year={2009},
  publisher={McGraw Hill Brasil}
}

@INPROCEEDINGS{sheppard2011test, 
author={J. W. Sheppard and M. Kaufman}, 
booktitle={AUTOTESTCON Proceedings, 2001. IEEE Systems Readiness Technology Conference}, 
title={Formal specification of testability metrics in IEEE P1522}, 
year={2001}, 
pages={71-82}, 
keywords={IEEE standards;automatic test equipment;automatic test software;design for testability;diagnostic expert systems;electronic data interchange;formal specification;military standards;peripheral interfaces;software standards;AI-ESTATE;ATE;BIT;IEEE 1232;IEEE P1522;Testability and Diagnosability Metrics standard;formal specification;information exchange standards;notionally correct definitions;precise definitions;predictive testability analysis;standard information. models;system complexity;testability measures;testability. metrics;Acoustic testing;Control systems;Corona;Costs;Electronic equipment testing;Formal specifications;Measurement standards;Production facilities;Standards development;System testing}, 
doi={10.1109/AUTEST.2001.948921}, 
ISSN={1080-7225}, 
month={},}

@inproceedings{Zeiss2007,
  title={Applying the ISO 9126 quality model to test specifications - exemplified for TTCN-3 test specifications},
  author={Benjamin Zeiss and Diana Vega and Ina Schieferdecker and Helmut Neukirchen and Jens Grabowski},
  booktitle={Software Engineering},
  year={2007}
}

@INPROCEEDINGS{repasi2009, 
author={T. Repasi}, 
booktitle={2009 5th International Symposium on Applied Computational Intelligence and Informatics}, 
title={Software testing - State of the art and current research challanges}, 
year={2009}, 
pages={47-50}, 
keywords={program testing;software metrics;software quality;automated test generation;software development process;software metrics;software quality;software testing;Acoustical engineering;Automatic testing;Process design;Programming;Quality assurance;Reliability engineering;Software quality;Software testing;System testing;Unified modeling language}, 
doi={10.1109/SACI.2009.5136289}, 
month={May},}

@book{sommerville2008engenharia,
  title={Engenharia de software},
  author={Sommerville, I. and Melnikoff, S.S.S. and Arakaki, R. and de Andrade Barbosa, E.},
  isbn={9788588639287},
  url={https://books.google.com.br/books?id=ifIYOgAACAAJ},
  year={2008},
  publisher={ADDISON WESLEY BRA}
}

@book{Sommerville2010,
 author = {Sommerville, Ian},
 title = {Software Engineering},
 year = {2010},
 isbn = {0137035152, 9780137035151},
 edition = {9th},
 publisher = {Addison-Wesley Publishing Company},
 address = {USA}
} 


@inproceedings{Tahir2014test, 
author={A. Tahir and S. G. MacDonell and J. Buchan}, 
booktitle={Evaluation of Novel Approaches to Software Engineering (ENASE), 2014 International Conference on}, 
title={Understanding class-level testability through dynamic analysis}, 
year={2014}, 
pages={1-10}, 
keywords={Correlation;Couplings;Measurement;Runtime;Software;Testing;Dynamic Analysis;Dynamic Metrics;Software Testability;Software Understanding;Unit Testing}, 
month={April},
}

@Inbook{Victor2011,
author="Victor, Monisha
and Upadhyay, Nitin",
editor="Nagamalai, Dhinaharan
and Renault, Eric
and Dhanuskodi, Murugan",
title="Selection of Software Testing Technique: A Multi Criteria Decision Making Approach",
bookTitle="Trends in Computer Science, Engineering and Information Technology: First International Conference on Computer Science, Engineering and Information Technology, CCSEIT 2011, Tirunelveli, Tamil Nadu, India, September 23-25, 2011. Proceedings",
year="2011",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="453--462",
isbn="978-3-642-24043-0",
doi="10.1007/978-3-642-24043-0_46",
url="http://dx.doi.org/10.1007/978-3-642-24043-0_46"
}

@inproceedings{Pacheco2007,
author = {Pacheco, Carlos and D. Ernst, Michael},
year = {2007},
month = {01},
pages = {815-816},
title = {Randoop: Feedback-directed random testing for Java},
booktitle = {Proceedings of the Conference on Object-Oriented Programming Systems, Languages, and Applications, OOPSLA}
}

@article{Cadar2013,
 author = {Cadar, Cristian and Sen, Koushik},
 title = {Symbolic Execution for Software Testing: Three Decades Later},
 journal = {Commun. ACM},
 issue_date = {February 2013},
 volume = {56},
 number = {2},
 month = feb,
 year = {2013},
 issn = {0001-0782},
 pages = {82--90},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/2408776.2408795},
 doi = {10.1145/2408776.2408795},
 acmid = {2408795},
 publisher = {ACM},
 address = {New York, NY, USA}
} 

@inproceedings{Cadar2008,
 author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
 title = {KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs},
 booktitle = {Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation},
 series = {OSDI'08},
 year = {2008},
 location = {San Diego, California},
 pages = {209--224},
 numpages = {16},
 url = {http://dl.acm.org/citation.cfm?id=1855741.1855756},
 acmid = {1855756},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA}
} 


@inproceedings{dick93,
author="Dick, Jeremy
and Faivre, Alain",
editor="Woodcock, James C. P.
and Larsen, Peter G.",
title="Automating the generation and sequencing of test cases from model-based specifications",
booktitle="FME '93: Industrial-Strength Formal Methods",
year="1993",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="268--284",
}

@article{McMinn2004,
 author = {McMinn, Phil},
 title = {Search-based Software Test Data Generation: A Survey: Research Articles},
 journal = {Softw. Test. Verif. Reliab.},
 issue_date = {June 2004},
 volume = {14},
 number = {2},
 month = jun,
 year = {2004},
 issn = {0960-0833},
 pages = {105--156},
 numpages = {52},
 url = {http://dx.doi.org/10.1002/stvr.v14:2},
 doi = {10.1002/stvr.v14:2},
 acmid = {1077279},
 publisher = {John Wiley and Sons Ltd.},
 address = {Chichester, UK},
 keywords = {automated software test data generation, evolutionary algorithms, evolutionary testing, metaheuristic search, search-based software engineering, simulated annealing}
} 

@article{Harman2012,
 author = {Harman, Mark and Mansouri, S. Afshin and Zhang, Yuanyuan},
 title = {Search-based Software Engineering: Trends, Techniques and Applications},
 journal = {ACM Comput. Surv.},
 issue_date = {November 2012},
 volume = {45},
 number = {1},
 month = dec,
 year = {2012},
 issn = {0360-0300},
 pages = {11:1--11:61},
 articleno = {11},
 numpages = {61},
 url = {http://doi.acm.org/10.1145/2379776.2379787},
 doi = {10.1145/2379776.2379787},
 acmid = {2379787},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Software engineering, search-based techniques, survey}
} 

@article{Godefroid2005,
 author = {Godefroid, Patrice and Klarlund, Nils and Sen, Koushik},
 title = {DART: Directed Automated Random Testing},
 journal = {SIGPLAN Not.},
 issue_date = {June 2005},
 volume = {40},
 number = {6},
 month = jun,
 year = {2005},
 issn = {0362-1340},
 pages = {213--223},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1064978.1065036},
 doi = {10.1145/1064978.1065036},
 acmid = {1065036},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {automated test generation, interfaces, program verification, random testing, software testing}
} 

@article{Sen2005,
 author = {Sen, Koushik and Marinov, Darko and Agha, Gul},
 title = {CUTE: A Concolic Unit Testing Engine for C},
 journal = {SIGSOFT Softw. Eng. Notes},
 issue_date = {September 2005},
 volume = {30},
 number = {5},
 month = sep,
 year = {2005},
 issn = {0163-5948},
 pages = {263--272},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1095430.1081750},
 doi = {10.1145/1095430.1081750},
 acmid = {1081750},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {concolic testing, data structure testing, explicit path model-checking, random testing, testing C programs, unit testing}
} 

@InProceedings{Sen2006,
author="Sen, Koushik
and Agha, Gul",
editor="Ball, Thomas
and Jones, Robert B.",
title="CUTE and jCUTE: Concolic Unit Testing and Explicit Path Model-Checking Tools",
booktitle="Computer Aided Verification",
year="2006",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="419--423",
abstract="CUTE, a Concolic Unit Testing Engine for C and Java, is a tool to systematically and automatically test sequential C programs (including pointers) and concurrent Java programs. CUTE combines concrete and symbolic execution in a way that avoids redundant test cases as well as false warnings. The tool also introduces a race-flipping technique to efficiently test and model check concurrent programs with data inputs.",
isbn="978-3-540-37411-4"
}

@article{Visser2004,
 author = {Visser, Willem and Pǎsǎreanu, Corina S. and Khurshid, Sarfraz},
 title = {Test Input Generation with Java PathFinder},
 journal = {SIGSOFT Softw. Eng. Notes},
 issue_date = {July 2004},
 volume = {29},
 number = {4},
 month = jul,
 year = {2004},
 issn = {0163-5948},
 pages = {97--107},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1013886.1007526},
 acmid = {1007526},
 publisher = {ACM},
 address = {New York, NY, USA}
} 

@InProceedings{Tillmann2008,
author="Tillmann, Nikolai
and de Halleux, Jonathan",
editor="Beckert, Bernhard
and H{\"a}hnle, Reiner",
title="Pex--White Box Test Generation for .NET",
booktitle="Tests and Proofs",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="134--153",
abstract="Pex automatically produces a small test suite with high code coverage for a .NET program. To this end, Pex performs a systematic program analysis (using dynamic symbolic execution, similar to path-bounded model-checking) to determine test inputs for Parameterized Unit Tests. Pex learns the program behavior by monitoring execution traces. Pex uses a constraint solver to produce new test inputs which exercise different program behavior. The result is an automatically generated small test suite which often achieves high code coverage. In one case study, we applied Pex to a core component of the .NET runtime which had already been extensively tested over several years. Pex found errors, including a serious issue.",
isbn="978-3-540-79124-9"
}

@inproceedings{Fraser2011,
 author = {Fraser, Gordon and Arcuri, Andrea},
 title = {EvoSuite: Automatic Test Suite Generation for Object-oriented Software},
 booktitle = {Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering},
 series = {ESEC/FSE '11},
 year = {2011},
 isbn = {978-1-4503-0443-6},
 location = {Szeged, Hungary},
 pages = {416--419},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/2025113.2025179},
 doi = {10.1145/2025113.2025179},
 acmid = {2025179},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {assertion generation, search based soft- ware testing, test case generation}
} 


@article{Fraser2013,
 author = {Fraser, Gordon and Arcuri, Andrea},
 title = {Whole Test Suite Generation},
 journal = {IEEE Trans. Softw. Eng.},
 issue_date = {February 2013},
 volume = {39},
 number = {2},
 month = feb,
 year = {2013},
 issn = {0098-5589},
 pages = {276--291},
 numpages = {16},
 url = {http://dx.doi.org/10.1109/TSE.2012.14},
 doi = {10.1109/TSE.2012.14},
 acmid = {2478706},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
 keywords = {Software,Genetic algorithms,Search problems,Arrays,Genetic programming,Software testing,collateral coverage,Search-based software engineering,length,branch coverage,genetic algorithm,infeasible goal}
} 

@article{Fraser2014,
 author = {Fraser, Gordon and Arcuri, Andrea},
 title = {A Large-Scale Evaluation of Automated Unit Test Generation Using EvoSuite},
 journal = {ACM Trans. Softw. Eng. Methodol.},
 issue_date = {December 2014},
 volume = {24},
 number = {2},
 month = dec,
 year = {2014},
 issn = {1049-331X},
 pages = {8:1--8:42},
 articleno = {8},
 numpages = {42},
 url = {http://doi.acm.org/10.1145/2685612},
 doi = {10.1145/2685612},
 acmid = {2685612},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JUnit, Java, Unit testing, automated test generation, benchmark, branch coverage, empirical software engineering}
} 


@article{Fraser2015,
 author = {Fraser, Gordon and Staats, Matt and McMinn, Phil and Arcuri, Andrea and Padberg, Frank},
 title = {Does Automated Unit Test Generation Really Help Software Testers? A Controlled Empirical Study},
 journal = {ACM Trans. Softw. Eng. Methodol.},
 issue_date = {August 2015},
 volume = {24},
 number = {4},
 month = sep,
 year = {2015},
 issn = {1049-331X},
 pages = {23:1--23:49},
 articleno = {23},
 numpages = {49},
 url = {http://doi.acm.org/10.1145/2699688},
 doi = {10.1145/2699688},
 acmid = {2699688},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Unit testing, automated test generation, branch coverage, empirical software engineering}
} 

@inproceedings{Fraser2017,
 author = {Fraser, Gordon and Rojas, Jos{\'e} Miguel and Campos, Jos{\'e} and Arcuri, Andrea},
 title = {EvoSuite at the SBST 2017 Tool Competition},
 booktitle = {Proceedings of the 10th International Workshop on Search-Based Software Testing},
 series = {SBST '17},
 year = {2017},
 isbn = {978-1-5386-2789-1},
 location = {Buenos Aires, Argentina},
 pages = {39--41},
 numpages = {3},
 url = {https://doi.org/10.1109/SBST.2017..6},
 doi = {10.1109/SBST.2017..6},
 acmid = {3105435},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA}
} 

@Article{Rojas2017,
author="Rojas, Jos{\'e} Miguel
and Vivanti, Mattia
and Arcuri, Andrea
and Fraser, Gordon",
title="A detailed investigation of the effectiveness of whole test suite generation",
journal="Empirical Software Engineering",
year="2017",
month="Apr",
day="01",
volume="22",
number="2",
pages="852--893",
doi="10.1007/s10664-015-9424-2",
url="https://doi.org/10.1007/s10664-015-9424-2"
}

@InProceedings{Campos2017,
author="Campos, Jose
and Ge, Yan
and Fraser, Gordon
and Eler, Marcelo
and Arcuri, Andrea",
editor="Menzies, Tim
and Petke, Justyna",
title="An Empirical Evaluation of Evolutionary Algorithms for Test Suite Generation",
booktitle="Search Based Software Engineering",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="33--48",
isbn="978-3-319-66299-2"
}

@INPROCEEDINGS{Singh2014, 
author={R. Singh}, 
booktitle={2014 Fourth International Conference on Communication Systems and Network Technologies}, 
title={Test Case Generation for Object-Oriented Systems: A Review}, 
year={2014}, 
volume={}, 
number={}, 
pages={981-989}, 
keywords={object-oriented programming;program testing;software quality;fault detection ability;object-oriented systems;software testing process;system failure;system quality;test case generation technique;Object oriented modeling;Software;Software reliability;Software testing;Unified modeling language;Object-Oriented System;Sequence diagram;Software Testing;Test Case;Test case classes;UML diagram;Use case diagram;object-oriented net}, 
doi={10.1109/CSNT.2014.201}, 
ISSN={}, 
month={April},
}

@INPROCEEDINGS{Jacob2016, 
author={P. M. Jacob and M. Prasanna}, 
booktitle={2016 International Conference on Information Science (ICIS)}, 
title={A Comparative analysis on Black box testing strategies}, 
year={2016}, 
volume={}, 
number={}, 
pages={1-6}, 
keywords={program testing;software quality;SDLC;Waterfall model;black box testing strategies;coding phase;integration testing;software development life cycle;software quality;software testing;system testing;testing activities;unit testing;white box testing;Computer bugs;Programming;Software systems;Software testing;System testing;Boundary Value Analysis;Equivalence Class Partitioning;Integration Testing;Software Development Life Cycle;Software Testing;System Testing;Unit Testing}, 
doi={10.1109/INFOSCI.2016.7845290}, 
ISSN={}, 
month={Aug},}

@INPROCEEDINGS{dave2015, 
author={M. Dave and R. Agrawal}, 
booktitle={2015 IEEE International Advance Computing Conference (IACC)}, 
title={Search based techniques and mutation analysis in automatic test case generation: A survey}, 
year={2015}, 
volume={}, 
number={}, 
pages={795-799}, 
keywords={evolutionary computation;program testing;search problems;search based techniques;mutation analysis;automatic test case generation;mutation testing;test data generation;code coverage;meta-heuristic techniques;Software engineering;Testing;Evolutionary computation;Software;Software algorithms;Reliability;Based Software Engineering;Evolutionary algorithms;test case generation;mutation score}, 
doi={10.1109/IADCC.2015.7154816}, 
ISSN={}, 
month={June},}

@article{shamriski20151115,
author = {Shamshiri, Sina and Rojas, José Miguel and Gazzola, Luca and Fraser, Gordon and McMinn, Phil and Mariani, Leonardo and Arcuri, Andrea},
title = {Random or evolutionary search for object-oriented test suite generation?},
journal = {Software Testing, Verification and Reliability},
volume = {28},
number = {4},
pages = {e1660},
keywords = {automated software testing, automated test generation, chemical reaction optimization, genetic algorithms, random search, search-based software testing},
doi = {10.1002/stvr.1660},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/stvr.1660},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/stvr.1660},
note = {e1660 stvr.1660},
abstract = {Summary An important aim in software testing is constructing a test suite with high structural code coverage, that is, ensuring that most if not all of the code under test have been executed by the test cases comprising the test suite. Several search-based techniques have proved successful at automatically generating tests that achieve high coverage. However, despite the well-established arguments behind using evolutionary search algorithms (eg, genetic algorithms) in preference to random search, it remains an open question whether the benefits can actually be observed in practice when generating unit test suites for object-oriented classes. In this paper, we report an empirical study on the effects of using evolutionary algorithms (including a genetic algorithm and chemical reaction optimization) to generate test suites, compared with generating test suites incrementally with random search. We apply the EVOSUITE unit test suite generator to 1000 classes randomly selected from the SF110 corpus of open-source projects. Surprisingly, the results show that the difference is much smaller than one might expect: While evolutionary search covers more branches of the type where standard fitness functions provide guidance, we observed that, in practice, the vast majority of branches do not provide any guidance to the search. These results suggest that, although evolutionary algorithms are more effective at covering complex branches, a random search may suffice to achieve high coverage of most object-oriented classes.}
}

@INPROCEEDINGS{shamshiri2018, 
author={S. Shamshiri and J. M. Rojas and J. P. Galeotti and N. Walkinshaw and G. Fraser}, 
booktitle={2018 IEEE 11th International Conference on Software Testing, Verification and Validation (ICST)}, 
title={How Do Automatically Generated Unit Tests Influence Software Maintenance?}, 
year={2018}, 
volume={}, 
number={}, 
pages={250-261}, 
keywords={program testing;software maintenance;automated test generation;automatically generated unit tests;software maintenance;Task analysis;Maintenance engineering;Software maintenance;Test pattern generators;Java;Biological cells;Software maintenance;Automated test generation;Empirical software engineering;Software testing;Test maintenance}, 
doi={10.1109/ICST.2018.00033}, 
ISSN={}, 
month={April},}


@article{Karnopp63,
 author = {Karnopp, Dean C.},
 title = {Random Search Techniques for Optimization Problems},
 journal = {Automatica},
 issue_date = {August, 1963},
 volume = {1},
 number = {2-3},
 month = aug,
 year = {1963},
 issn = {0005-1098},
 pages = {111--121},
 numpages = {11},
 url = {http://dx.doi.org/10.1016/0005-1098(63)90018-9},
 doi = {10.1016/0005-1098(63)90018-9},
 acmid = {2233347},
 publisher = {Pergamon Press, Inc.},
 address = {Tarrytown, NY, USA}
} 

@INPROCEEDINGS{rojas2017b, 
author={J. M. Rojas and G. Fraser}, 
booktitle={2017 IEEE ACM 10th International Workshop on Search-Based Software Testing (SBST)}, 
title={Is Search-Based Unit Test Generation Research Stuck in a Local Optimum?}, 
year={2017}, 
volume={}, 
number={}, 
pages={51-52}, 
doi={10.1109/SBST.2017.4}, 
ISSN={}, 
month={May},}

@INPROCEEDINGS{Kaprocki2015, 
author={Z. Kaprocki and V. Pekovic and G. Velikic}, 
booktitle={2015 IEEE 1st International Workshop on Consumer Electronics (CE WS)}, 
title={Combined testing approach: Increased efficiency of black box testing}, 
year={2015}, 
volume={}, 
number={}, 
pages={76-78}, 
keywords={automatic test equipment;combined testing;black box testing efficiency;manual black box testing;automatic black box testing;hybrid approach;test plan generation;functional testing;testing quality;Conferences;Manuals;quality assurance;black box testing;embedded systems}, 
doi={10.1109/CEWS.2015.7867160}, 
ISSN={}, 
month={March},}

@INPROCEEDINGS{Xu2016, 
author={S. Xu and L. Chen and C. Wang and O. Rud}, 
booktitle={2016 17th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)}, 
title={A comparative study on black-box testing with open source applications}, 
year={2016}, 
volume={}, 
number={}, 
pages={527-532}, 
keywords={program testing;public domain software;black-box testing techniques;open source software applications;closed-source software;Testing;Redundancy;Complexity theory;Black-Box Testing;Open-Source Applications;Experimental Software Engineering;Efficiency and Effectiveness}, 
doi={10.1109/SNPD.2016.7515953}, 
ISSN={}, 
month={May},}

@INPROCEEDINGS{Walkinshaw2017, 
author={N. Walkinshaw and G. Fraser}, 
booktitle={2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)}, 
title={Uncertainty-Driven Black-Box Test Data Generation}, 
year={2017}, 
volume={}, 
number={}, 
pages={253-263}, 
keywords={genetic algorithms;learning (artificial intelligence);program testing;sampling methods;uncertainty-driven black-box test data generation;machine learning;query strategy framework;genetic programming engine;Apache commons math framework;JodaTime;adaptive random testing;Testing;Uncertainty;Machine learning algorithms;Subspace constraints;Data models;Software systems;Genetic programming;black-box testing;test generation;machine learning;uncertainty sampling;genetic programming}, 
doi={10.1109/ICST.2017.30}, 
ISSN={}, 
month={March},}

@INPROCEEDINGS{Seth2016, 
author={H. R. Seth and H. Banka}, 
booktitle={2016 3rd International Conference on Recent Advances in Information Technology (RAIT)}, 
title={Hardware implementation of Naïve Bayes classifier: A cost effective technique}, 
year={2016}, 
volume={}, 
number={}, 
pages={264-267}, 
keywords={Bayes methods;microcomputers;pattern classification;statistical analysis;hardware implementation;naïve Bayes classifier;data classification;cost effective technique;statistical classifier;Raspberry Pi;open source hardware platform;Hardware;Training;Classification algorithms;Data mining;Bayes methods;Real-time systems;Data Mining;Classification;Training Dataset;Test Dataset;Classifier;Bayesian Classifier;Naive Bayes Classifier;Raspberry Pi}, 
doi={10.1109/RAIT.2016.7507913}, 
ISSN={}, 
month={March},}

@INPROCEEDINGS{sharma2015, 
author={P. Sharma and D. Singh and A. Singh}, 
booktitle={2015 2nd International Conference on Electronics and Communication Systems (ICECS)}, 
title={Classification algorithms on a large continuous random dataset using rapid miner tool}, 
year={2015}, 
volume={}, 
number={}, 
pages={704-709}, 
keywords={data mining;learning (artificial intelligence);pattern classification;sampling methods;very large databases;classification algorithms;large continuous random dataset;rapid miner tool;data mining;large databases;supervised machine learning;data characteristics;classification performance;stratified sampling;J48 classifier;C4.5 classifier;naïve Bayes classifier;Classification algorithms;Decision trees;Data mining;Accuracy;Machine learning algorithms;Training;Data models;Classification;Naïve Bayes;C4.5;J48;Large Data;Rapid Miner}, 
doi={10.1109/ECS.2015.7125003}, 
ISSN={}, 
month={Feb},}

@INPROCEEDINGS{suresh2016, 
author={Y. Suresh}, 
booktitle={2016 International Conference on Computation System and Information Technology for Sustainable Solutions (CSITSS)}, 
title={Software quality assessment for open source software using logistic amp; Naive Bayes classifier}, 
year={2016}, 
volume={}, 
number={}, 
pages={267-272}, 
keywords={Bayes methods;data mining;object-oriented methods;pattern classification;public domain software;software development management;software maintenance;software metrics;software quality;software reliability;software fault classification model;Chidamber and Kemerer Metric suite;system quality;data mining;object-oriented metrics;software reliability;maintanence cost;software fault detection;software fault prediction model;software process management;Naive Bayes classifier;logistic classifier;open source software;software product quality assessment;Software;Measurement;Logistics;CK metric suite;fault;logistic;naive bayes}, 
doi={10.1109/CSITSS.2016.7779369}, 
ISSN={}, 
month={Oct},}

@misc{Junit,
  title = {junit.org/junit5/},
  howpublished = {\url{https://junit.org/junit5/}},
  note = {Acessado em: 2018-08-04}
}

@misc{ClassPath,
  title = {Classpath,Java docs},
  howpublished = {\url{https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html}},
  note = {Acessado em: 2018-08-04}
}

@misc{Mockito,
  title = {site.mockito.org},
  howpublished = {\url{http://site.mockito.org}},
  note = {Acessado em: 2018-08-04}
}

@misc{Evosuite,
  title = {evosuite.org},
  howpublished = {\url{http://www.evosuite.org/}},
  note = {Acessado em: 2018-07-01}
}



@article{teste1,
author 		= {Nina Amenta and Sunghee Choi and Tamal K. Dey and N. Leekha},
title 		= {A Simple Algorithm for Homeomorphic Surface Reconstruction},
journal 	= {International Journal of Computational Geometry and Applications},
publisher = {World Scientific Publishing Co.},
volume 		= {12},
number 		= {1-2},
pages 		= {125-141},
year 			= {2002},
}

@article{teste2,
author 		= {Nina Amenta and Sunghee Choi and Tamal K. Dey and N. Leekha},
title 		= {A Simple Algorithm for Homeomorphic Surface Reconstruction},
journal 	= {International Journal of Computational Geometry and Applications},
publisher = {World Scientific Publishing Co.},
volume 		= {12},
number 		= {1-2},
pages 		= {125-141},
year 			= {2002},
}

@article{teste3,
author 		= {Nina Amenta and Sunghee Choi and Tamal K. Dey and N. Leekha},
title 		= {A Simple Algorithm for Homeomorphic Surface Reconstruction},
journal 	= {International Journal of Computational Geometry and Applications},
publisher = {World Scientific Publishing Co.},
volume 		= {12},
number 		= {1-2},
pages 		= {125-141},
year 			= {2002},
}

@article{temp1,
author 		= {},
title 		= {},
journal 	= {},
publisher = {},
volume 		= {},
number 		= {},
pages 		= {},
year 			= {},
}

@book{temp2,
author    = {},
title     = {},
edition   = {},
publisher = {},
year      = {}
}

@InBook{temp3,
author 		= {},
title 		= {},
booktitle	= {},
publisher	= {},
year 			= {},
chapter 	= {},
pages 		= {}
}

@inproceedings{temp4,
author    = {},
title     = {},
editor    = {},
booktitle = {},
publisher = {},
year      = {},
pages     = {}
}

@phdthesis{temp6,
author 		= {f},
title  		= {},
school 		= {},
year   		= {}
}

@mastersthesis{temp7,
author 		= {},
title  		= {},
school 		= {},
year   		= {}
}

@TechReport{temp8,
author 		= {},
title 		= {},
year 			= {}
}

@misc{temp9,
author 		= {},
title 		= {},
year 			= {},
url 			= {} 
}
